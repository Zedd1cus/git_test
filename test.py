def task(str): # функция, которая выводит True, если количество подстрок cat и dog совпадают в строке str

    if str.count('cat') == str.count('dog'): # count - функция, которая находит количество подстрок в строке
        return True # если условие верно, то выводим True
    else:
        return False # если условие неверно, то выводим False


xd1 = 'catcatcatasdasddogdogasdasddog' # пример на вход
print(task(xd1)) # выведет True

xd2 = 'catcatcatasdasddogdogasdasddg' # пример на вход
print(task(xd2)) # выведет False



def cent_abg(array): # функция, которая возвращает среднее арифметическое число в массиве без минимального и максимального чисел
    array.remove(max(array)) # функция remove удаляет максимальное число в массиве
    array.remove(min(array)) # функция remove удаляет минимальное число в массиве

    return sum(array) // len(array) # возвращаем центральное среднее арифметическое от массива чисел


# примеры массивов
xd1 = [1, 2, 3, 4, 100] 
xd2 = [1, 1, 5, 5, 10, 8, 7]
xd3 = [-10, -4, -2, -4, -2, 0]

print(cent_abg(xd1)) # выведет 3
print(cent_abg(xd2)) # выведет 5 
print(cent_abg(xd3)) # выведет -3


def has22(arr): # функция, которая возвращает True, если по соседству с двойкой есть двойка
    modified_arr = [str(x) for x in arr] # все числа в массиве превращаем в строки
    str_of_arr = ''.join(modified_arr) # преобразуем массив в строку

    return True if '22' in str_of_arr else False # если в строке есть 22, то возвращаем True, иначе False


# примеры массивов
xd1 = [1, 2, 2]
xd2 = [1, 2, 1, 2]
xd3 = [2, 1, 2]

print(has22(xd1)) # Выведет True
print(has22(xd2)) # Выведет False
print(has22(xd3)) # Выведет False


def eleven(num): # функция, которая возвращает True, если число num делится на 11
    str_num = str(num) # преобразуем число num в строку

    even_arr = [] # пустой массив четных цифр
    odd_arr = [] # пустой массив нечетных цифр

    for i in range(len(str_num)): # цикл от 0 элемента до длины строки числа, не включая длину
        if i % 2 == 0: # условие выполняется, если i четное
            even_arr.append(int(str_num[i])) # добавляем четную цифру в массив четных цифр
        else: # условие выполняется, если i нечетное
            odd_arr.append(int(str_num[i])) # добавляем нечетную цифру в массив нечетных цифр

    if abs(sum(even_arr) - sum(odd_arr)) % 11 == 0: # условие, которое проверяет: делится ли разность между суммой цифр,
        return True                                 # стоящих на четных местах, и суммой цифр, стоящих на нечетных местах,
    else:                                           # на 11
        return False


# примеры чисел
xd1 = 121
xd2 = 1211
print(eleven(xd1)) # выведет True
print(eleven(xd2)) # выведет False



from random import randint # импортируем randint из библиотеки random


def get_number_of_balls(sum_n): # функция, которая возвращает количество заброшенных мячей
    shag = 0 # шаг
    s = 0 # сумма перебора
    prev_shag = 0 # предшаг
    count_3 = 0 # счетчик трехочковых
    counter = 0 # счетчик всех заброшенных мячей

    while s < sum_n: # цикл будет выполняться, пока сумма перебора будет меньше суммы, которая подается на вход
        shag = 0 # с каждой итерацией шаг обнуляется
        a = randint(2, 3) # randint - фукнция, которая возвращает либо 2, либо 3

        if a == 3 and count_3 < 2: # если a будет равняться 3 и счетчик трехочковых будет меньше 2, то будет выполняться условие
            shag = prev_shag + 3 # шаг будет равен сумме предшага и 3
            prev_shag = shag # предшаг будет равен шагу

            s += shag # к сумме перебора прибавляем шаг
            count_3 += 1 # счетчик трехочковых увеличиваем на 1 
            counter += 1 # счетчик всех заброшенных мячей увеличиваем на 1

        elif a == 2: # если а будет равняться 2, то будет выполняться условие
            shag = prev_shag + 2 # шаг будет равен сумме предшага и 2
            prev_shag = shag # предшаг будет равен шагу

            s += shag # к сумме перебора прибавляем шаг
            counter += 1 # счетчик всех заброшенных мячей увеличиваем на 1


    else: # если условие цикла перестанет выполняться, то возвращаем количество всех заброшенных мячей
        return counter # возвращаем счетчик counter


#пример суммы, которая подается на вход
print(get_number_of_balls(33)) # выведет 5